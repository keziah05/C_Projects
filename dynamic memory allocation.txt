#include<stdio.h>
#include<stdlib.h> // to import malloc,calloc, free& realloc
int main(){
    int *ptr;
    ptr=(int *)malloc(5*sizeof(int));//memory allocation
    if (ptr==NULL){
        printf("Memory allocation failed.\n");
    }
    ptr[0]=1;
    ptr[1]=2;
    ptr[2]=3;
    ptr[3]=4;
    ptr[4]=5;

    for (int i=0;i<5;i++){
        printf("%d\n",ptr[i]);
    }

    return 0;
}

Q: Using malloc, find the sum of array elements.

#include<stdio.h>
#include<stdlib.h>
void main(){
    int n,*ptr,i,sum=0;
    printf("enter number of elements:  ");
    scanf("%d",&n);
    ptr=(int*)malloc(n*sizeof(int));//memory allocation
    if(ptr==NULL){
        printf("memory allocation failed.\n");
    }
    printf("enter array elements:  ");
        for(int i=0;i<n;i++){
        scanf("%d", &ptr[i]); // easier to read, does the same thing

            sum+=*(ptr+i);
        }
    printf("sum:%d",sum);
    free(ptr);
    

}

Q: Using calloc, reverse the array


#include<stdio.h>
#include<stdlib.h>
void main(){
    int n,*ptr,i,sum=0;
    printf("enter number of elements:  ");
    scanf("%d",&n);
    ptr=(int*)malloc(n*sizeof(int));//memory allocation
    if(ptr==NULL){
        printf("memory allocation failed.\n");
    }
    printf("enter array elements:  ");
        for(int i=0;i<n;i++){
        scanf("%d", &ptr[i]); // easier to read, does the same thing
        }
        printf("reversed array\n");
   for (int i=n-1;i>=0;i--){
    printf("%d\n",ptr[i]);
   }

}

Q: Using realloc & free() functions, write a program

#include <stdio.h>
#include <stdlib.h>

void main() {
    int *ptr;

    // Step 1: Allocate memory for 5 integers
    ptr = (int *)malloc(5 * sizeof(int));
    if (ptr == NULL) {
        printf("Memory allocation failed.\n");
        return;
    }

    // Step 2: Initialize the first 5 elements
    ptr[0] = 1;
    ptr[1] = 2;
    ptr[2] = 3;
    ptr[3] = 4;
    ptr[4] = 5;

    // Step 3: Print the first 5 elements
    printf("Original array:\n");
    for (int i = 0; i < 5; i++) {
        printf("Number at %d is: %d\n", i, ptr[i]);
    }

    // Step 4: Reallocate memory for 8 integers
    ptr = (int *)realloc(ptr, 8 * sizeof(int));
    if (ptr == NULL) {
        printf("Reallocation failed.\n");
        return;
    }

    // Step 5: Initialize the new elements
    ptr[5] = 6;
    ptr[6] = 7;
    ptr[7] = 8;

    // Step 6: Print all 8 elements
    printf("Resized array:\n");
    for (int i = 0; i < 8; i++) {
        printf("Number at %d is: %d\n", i, ptr[i]);
    }

    // Step 7: Free the memory
    free(ptr);
}

