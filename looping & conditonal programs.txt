Q: print even numbers for 0 to N 

#include<stdio.h>
int main()
{
	int n,i;
	printf("enter n value: ");
	scanf("%d",&n);
	for (i=0;i<=n;i++){
		if(n%2==0){
			printf ("%d\n",i);
		}
	}
	return 0;
}

Q: Factorial of a N

#include<stdio.h>
int main()
{
	int n,i,fact=1;
	printf("n value: ");
	scanf("%d",&n);
	for (i=1;i<=n;i++){
		fact*=i;
	}
	printf("factorial of %d: %d",n,fact);
	return 0;
}

Q: Sum of Digits of a Number

#include <stdio.h>

int main() {
    int num, digit, sum = 0;

    printf("Enter a number: ");
    scanf("%d", &num);

    while (num != 0) {
        digit = num % 10;      // Get the last digit
        sum = sum + digit;     // Add it to the sum
        num = num / 10;        // Remove the last digit
    }

    printf("Sum of digits = %d\n", sum);

    return 0;
}

Q: Reverse of Number 

#include <stdio.h>

int main() {
    int num, digit, reverse = 0;

    printf("Enter a number: ");
    scanf("%d", &num);

    while (num != 0) {
        digit = num % 10;                 // Get the last digit
        reverse = reverse * 10 + digit;   // Shift digits and add new digit
        num = num / 10;                   // Remove last digit
    }

    printf("Reversed number = %d\n", reverse);

    return 0;
}


Q: Use Switch Case to print the days of the Week

#include <stdio.h>
int main()
{
	int n;
	printf("enter number (1-7): ");
	scanf("%d",&n);
	switch (n){
		case 1:
		printf("Monday");
		break;
		
		case 2:
		printf("Tuesaday");
		break;
		
		case 3:
		printf("Wednesday");
		break;
		
		case 4:
		printf("Thursday");
		break;
		
		case 5:
		printf("Friday");
		break;
		
		case 6:
		printf("Saturday");
		break;
		
		case 7:
		printf("Sunday");
		break;

        default:
		 printf("no valid day");
		
	}
	return 0;
}

Q: Odd-Even using if-else:

#include<stdio.h>
int main(){
	int n;
	printf("enter n value: ");
	scanf("%d",&n);
	if (n%2==0){
		printf("%d is an even number",n);
	}
	else 
	{
		printf("%d is a odd number",n);
	}
	return 0;
}

Q: Multiplication table

#include<stdio.h>
int main()
{
	int n,number=2,i;
	printf("enter n value: ");
	scanf("%d",&n);
	printf("TABLE OF %d\n",n);
	for(i=1;i<=12;i++){
			printf("%dx%d=%d\n",number,i,n*i);
	}
	return 0;

	
}

Q: verify prime number condition

#include<stdio.h>
int main()
{
	int n,i,count=0;
	printf("n value: ");
	scanf("%d",&n);
	for (i=1;i<=n;i++){
		if (n%i==0){
			count ++;
		}
		
	}
	if (count==2){
		printf("%d is a prime number.",n);
	}
	else {
		printf("%d is not a prime number.",n);
	}
	return 0;
}

Q: Palindrome Number 
ðŸ’¡ Explanation: A palindrome number reads the same forward and backward. eg: 121 â†’ Palindrome 

(using while loop)
#include <stdio.h>

int main() {
    int num, original, reversed = 0, digit;

    printf("Enter a number: ");
    scanf("%d", &num);

    original = num;  // Save original number

    // Reverse the number
    while (num != 0) {
        digit = num % 10;
        reversed = reversed * 10 + digit;
        num = num / 10;
    }

    // Compare reversed with original
    if (original == reversed) {
        printf("%d is a Palindrome Number.\n", original);
    } else {
        printf("%d is Not a Palindrome Number.\n", original);
    }

    return 0;
}

(using for loop)
#include <stdio.h>

int main() {
    int num, reversed = 0, digit, original;

    printf("Enter a number: ");
    scanf("%d", &num);

    original = num;

    // Use a for loop to reverse the number
    for (; num != 0; num = num / 10) {
        digit = num % 10;
        reversed = reversed * 10 + digit;
    }

    // Check if palindrome
    if (original == reversed)
        printf("%d is a Palindrome Number.\n", original);
    else
        printf("%d is Not a Palindrome Number.\n", original);

    return 0;
}

(using do while loop)
#include <stdio.h>

int main() {
    int num, reversed = 0, digit, original;

    printf("Enter a number: ");
    scanf("%d", &num);

    original = num;

    // Use do...while to reverse the number
    do {
        digit = num % 10;
        reversed = reversed * 10 + digit;
        num = num / 10;
    } while (num != 0);

    // Check if palindrome
    if (original == reversed)
        printf("%d is a Palindrome Number.\n", original);
    else
        printf("%d is Not a Palindrome Number.\n", original);

    return 0;
}

Q: Fibonnaci Series

#include <stdio.h>

int main() {
    int n, i;
    int a = 0, b = 1, next;

    printf("Enter number of terms: ");
    scanf("%d", &n);

    printf("Fibonacci Series: ");

    for (i = 1; i <= n; i++) {
        printf("%d ", a);
        next = a + b;
        a = b;
        b = next;
    }

    return 0;
} (o\p explanation in WhatsApp)

Q: Count the no.of digits

#include <stdio.h>

int main() {
    int num, count = 0;

    printf("Enter a number: ");
    scanf("%d", &num);

    // Special case for 0
    if (num == 0) {
        count = 1;
    } else {
        while (num != 0) {
            num = num / 10;   // Remove last digit
            count++;          // Increment count
        }
    }

    printf("Number of digits = %d\n", count);

    return 0;
}

Q: Armstrong Number:

ðŸ’¡ Explanation:An Armstrong number of n digits is a number such that the sum of its digits raised to the power n is equal to the number itself.
eg: 153 (1^3+5^3+3^3=153)

#include <stdio.h>
#include <math.h>

int main() {
    int num, original, remainder, result = 0, n = 0;

    printf("Enter a number: ");
    scanf("%d", &num);

    original = num;

    // Count number of digits (n)
    int temp = num;
    while (temp != 0) {
        temp = temp / 10;
        n++;
    }

    // Calculate sum of digits^n
    temp = num;
    while (temp != 0) {
        remainder = temp % 10;
        result += pow(remainder, n); // raise digit to power n
        temp = temp / 10;
    }

    // Check if Armstrong
    if (result == original)
        printf("%d is an Armstrong Number.\n", original);
    else
        printf("%d is Not an Armstrong Number.\n", original);

    return 0;
}

Q: Sum of Series: 1 + 2 + 3 + ... + N

(using loop)
#include <stdio.h>

int main() {
    int i, n, sum = 0;

    printf("Enter a number (N): ");
    scanf("%d", &n);

    for (i = 1; i <= n; i++) {
        sum = sum + i;  // or sum += i;
    }

    printf("Sum of series = %d\n", sum);
    return 0;
}

(using formula)
#include <stdio.h>

int main() {
    int n, sum;

    printf("Enter a number (N): ");
    scanf("%d", &n);

    sum = n * (n + 1) / 2;

    printf("Sum of series = %d\n", sum);
    return 0;
}

Q: Use continue and break in loops to skip/stop when a condition is met

#include<stdio.h>
int main(){
	int i,j,n,m;
	printf("n value: ");
	scanf("%d",&n);
	
	printf("continue statement\n");
	for(i=0;i<=n;i++){
		if(i==3){
			continue;
		}
		printf("%d\n",i);
	}
	printf("m value: ");
	scanf("%d",&m);
	printf("break statement\n");
	
	for(j=0;j<=n;j++){
		if(j==3){
			break;
		}
		printf("%d\n",j);
	}
	return 0;
}

Q: the Star Pattern

#include <stdio.h>

int main() {
    int i, j, n;

    printf("Enter number of rows: ");
    scanf("%d", &n);

    for (i = 1; i <= n; i++) {         // Rows
        for (j = 1; j <= i; j++) {     // Columns (stars)
            printf("* ");
        }
        printf("\n");                 // Move to next line
    }

    return 0;
}

Q: Find GCD and LCM using Loops

ðŸ’¡Explanation
GCD (Greatest Common Divisor)
The largest number that divides both a and b completely (remainder = 0).

Loop from 1 to the smaller of a or b.

LCM (Least Common Multiple)
Smallest number that is divisible by both a and b.

Formula:
LCM= (axb)/GCD

#include <stdio.h>

int main() {
    int a, b, i, gcd = 1, lcm;

    // Input two numbers
    printf("Enter two numbers: ");
    scanf("%d %d", &a, &b);

    // Find GCD using loop
    for(i = 1; i <= a && i <= b; i++) {
        if(a % i == 0 && b % i == 0) {
            gcd = i;
        }
    }

    // LCM formula
    lcm = (a * b) / gcd;

    printf("GCD = %d\n", gcd);
    printf("LCM = %d\n", lcm);

    return 0;
}

Q: Perfect Number 
ðŸ’¡ Explanation: A number is Perfect if the sum of its proper divisors (excluding the number itself) is equal to the number.
eg: 6 â†’ Divisors: 1, 2, 3 â†’ 1 + 2 + 3 = 6

(for loop)
#include <stdio.h>

int main() {
    int num, i, sum = 0;

    printf("Enter a number: ");
    scanf("%d", &num);

    // Find divisors using for loop
    for(i = 1; i < num; i++) {
        if(num % i == 0) {
            sum += i;
        }
    }

    // Check if number is perfect
    if(sum == num)
        printf("%d is a Perfect Number.\n", num);
    else
        printf("%d is Not a Perfect Number.\n", num);

    return 0;
}
(do-while loop)
#include <stdio.h>

int main() {
    int num, i = 1, sum = 0;

    printf("Enter a number: ");
    scanf("%d", &num);

    // Using do-while to find divisors
    do {
        if(num % i == 0) {
            sum += i;
        }
        i++;
    } while(i < num);

    // Check if number is perfect
    if(sum == num)
        printf("%d is a Perfect Number.\n", num);
    else
        printf("%d is Not a Perfect Number.\n", num);

    return 0;
}

(using while loop)
#include <stdio.h>

int main() {
    int num, i = 1, sum = 0;

    printf("Enter a number: ");
    scanf("%d", &num);

    // Using while loop to find sum of divisors
    while(i < num) {
        if(num % i == 0) {
            sum = sum + i;
        }
        i++;
    }

    // Check if number is perfect
    if(sum == num)
        printf("%d is a Perfect Number.\n", num);
    else
        printf("%d is Not a Perfect Number.\n", num);

    return 0;
}

Q: Strong Number
ðŸ’¡ Explanation: A number is called a Strong Number if the sum of the factorials of its digits is equal to the number itself.
eg: 145 â†’ 1! + 4! + 5! = 1 + 24 + 120 = 145

#include <stdio.h>

int main() {
    int num, original, digit, sum = 0, fact;

    printf("Enter a number: ");
    scanf("%d", &num);

    original = num;  // Store original number

    while(num > 0) {
        digit = num % 10;  // Extract last digit

        // Find factorial of digit
        fact = 1;
        for(int i = 1; i <= digit; i++) {
            fact *= i;
        }

        sum += fact;      // Add factorial to sum
        num = num / 10;   // Remove last digit
    }

    // Check if number is strong
    if(sum == original)
        printf("%d is a Strong Number.\n", original);
    else
        printf("%d is Not a Strong Number.\n", original);

    return 0;
}

Q: find the samllest and largest of the given digit

#include <stdio.h>

int main() {
    int num, digit, smallest, largest;

    printf("Enter a number: ");
    scanf("%d", &num);

    // Initialize smallest and largest with the first digit
    smallest = 9;
    largest = 0;

    while(num > 0) {
        digit = num % 10;   // Get the last digit of the number

        if(digit < smallest) {
            smallest = digit;  // Update smallest if current digit is smaller
        }

        if(digit > largest) {
            largest = digit;   // Update largest if current digit is larger
        }

        num = num / 10;       // Remove the last digit
    }

    printf("Smallest digit = %d\n", smallest);
    printf("Largest digit = %d\n", largest);

    return 0;
}

Q: Print Prime Numbers Between 1 and 100

#include<stdio.h>

int main() {
    int n, i, count;

    printf("Prime numbers between 1 and 100 are:\n");

    // Loop to check prime numbers between 1 and 100
    for (n = 1; n <= 100; n++) {
        count = 0;  // Reset count for each number

        // Check divisors of n
        for (i = 1; i <= n; i++) {
            if (n % i == 0) {
                count++;
            }
        }

        // If count is 2, it's a prime number
        if (count == 2) {
            printf("%d ", n);  // Print the prime number
        }
    }

    return 0;
}
 
Q: Program to Validate User Input (Positive Number) using do-while Loop

#include <stdio.h>

int main() {
    int n;

    // Prompt user until a positive number is entered
    do {
        printf("Enter a positive number: ");
        scanf("%d", &n);

        // If the number is not positive, ask again
        if (n <= 0) {
            printf("Please enter a positive number.\n");
        }
    } while (n <= 0);  // Continue prompting while n is not positive

    printf("You entered a valid positive number: %d\n", n);

    return 0;
}

Q: Leap Year Using Nested If Statements
ðŸ’¡ Explanation: 

Leap Year Rules:
1. If a year is divisible by 4:

   It is a leap year, unless:

   The year is also divisible by 100.

2. If the year is divisible by 100, then:

   It must also be divisible by 400 to be a leap year.

   If divisible by 100 but not 400, it's not a leap year.

3. If a year is not divisible by 4, it cannot be a leap year.



#include <stdio.h>

int main() {
    int year;

    // Input the year from the user
    printf("Enter a year: ");
    scanf("%d", &year);

    // First check if the year is divisible by 4
    if (year % 4 == 0) {
        // Nested if: check if the year is also divisible by 100
        if (year % 100 == 0) {
            // Nested if: check if the year is divisible by 400
            if (year % 400 == 0) {
                printf("%d is a Leap Year.\n", year);
            } else {
                printf("%d is not a Leap Year.\n", year); // This should print for years divisible by 100 but not 400
            }
        } else {
            // If not divisible by 100, it's a leap year
            printf("%d is a Leap Year.\n", year);
        }
    } else {
        printf("%d is not a Leap Year.\n", year); // If the year is not divisible by 4
    }

    return 0;
}

Q: menu-driven program using switch-case to perform basic math operations

#include <stdio.h>

int main() {
    int choice;
    float num1, num2, result;

    // Menu-driven program
    do {
        printf("\nMenu:\n");
        printf("1. Add\n");
        printf("2. Subtract\n");
        printf("3. Multiply\n");
        printf("4. Divide\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        // If user selects Exit, break out of the loop
        if (choice == 5) {
            printf("Exiting the program.\n");
            break;
        }

        // Ask for two numbers to perform the operation
        printf("Enter first number: ");
        scanf("%f", &num1);
        printf("Enter second number: ");
        scanf("%f", &num2);

        // Switch-case to perform the appropriate operation
        switch (choice) {
            case 1:
                result = num1 + num2;
                printf("Result: %.2f + %.2f = %.2f\n", num1, num2, result);
                break;
            case 2:
                result = num1 - num2;
                printf("Result: %.2f - %.2f = %.2f\n", num1, num2, result);
                break;
            case 3:
                result = num1 * num2;
                printf("Result: %.2f * %.2f = %.2f\n", num1, num2, result);
                break;
            case 4:
                // Check for division by zero
                if (num2 == 0) {
                    printf("Error! Division by zero.\n");
                } else {
                    result = num1 / num2;
                    printf("Result: %.2f / %.2f = %.2f\n", num1, num2, result);
                }
                break;
            default:
                printf("Invalid choice! Please try again.\n");
                break;
        }
    } while (choice != 5);  // Continue until user chooses Exit

    return 0;
}

Q: Detect infinite loop in given code snippet

(for loop)
#include <stdio.h>
int main() {
    for (int i = 0; i != 10; ) {  // The loop condition will never be met
        printf("Infinite loop\n");
    }
    return 0;
}

(while loop)
#include <stdio.h>
int main() {
    int i = 1;
    while (i > 0) {  // This condition is always true because i is always positive
        printf("Infinite loop\n");
    }
    return 0;
}

(do-while loop)
#include <stdio.h>
int main() {
    int i = 0;
    do {
        printf("Infinite loop\n");
    } while (i != 1);  // i is never changed, so the condition will never become false
    return 0;
}









â€‹
